<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="es">
  <compounddef id="xaxidma__controller_8c" kind="file" language="C++">
    <compoundname>xaxidma_controller.c</compoundname>
    <includes refid="xaxidma__controller_8h" local="yes">xaxidma_controller.h</includes>
    <incdepgraph>
      <node id="15">
        <label>gpio_handler.h</label>
        <link refid="gpio__handler_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>platform.h</label>
        <link refid="platform_8h_source"/>
      </node>
      <node id="13">
        <label>platform_config.h</label>
        <link refid="platform__config_8h_source"/>
      </node>
      <node id="7">
        <label>tcp_com.h</label>
        <link refid="tcp__com_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>base_code/MB40ch_wUART/src/xaxidma_controller.c</label>
        <link refid="xaxidma__controller_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>xaxidma_controller.h</label>
        <link refid="xaxidma__controller_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>lwip/tcp.h</label>
      </node>
      <node id="11">
        <label>netif/xadapter.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="3">
        <label>xaxidma.h</label>
      </node>
      <node id="6">
        <label>xdebug.h</label>
      </node>
      <node id="19">
        <label>xgpio.h</label>
      </node>
      <node id="9">
        <label>xil_cache.h</label>
      </node>
      <node id="5">
        <label>xil_exception.h</label>
      </node>
      <node id="18">
        <label>xil_io.h</label>
      </node>
      <node id="14">
        <label>xil_printf.h</label>
      </node>
      <node id="16">
        <label>xil_types.h</label>
      </node>
      <node id="4">
        <label>xparameters.h</label>
      </node>
      <node id="20">
        <label>xscugic.h</label>
      </node>
      <node id="17">
        <label>xstatus.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="xaxidma__controller_8c_1a447efb52bdea94d5d9cfe0d53a27190d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int setup_DMA</definition>
        <argsstring>(void)</argsstring>
        <name>setup_DMA</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Main function</para>
<para>This function is the main entry of the interrupt test. It does the following:<itemizedlist>
<listitem><para>Set up the output terminal if UART16550 is in the hardware build</para>
</listitem><listitem><para>Initialize the DMA engine</para>
</listitem><listitem><para>Set up Tx and Rx channels</para>
</listitem><listitem><para>Set up the interrupt system for the Tx and Rx interrupts</para>
</listitem><listitem><para>Submit a transfer</para>
</listitem><listitem><para>Wait for the transfer to finish</para>
</listitem><listitem><para>Check transfer status</para>
</listitem><listitem><para>Disable Tx and Rx interrupts</para>
</listitem><listitem><para>Print test status and exit</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>XST_SUCCESS if tests pass</para>
</listitem><listitem><para>XST_FAILURE if fails.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>None. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="118" column="5" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="118" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1acca8061cadc05fcdfbf1d19244bf6777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DMA_test_routine</definition>
        <argsstring>()</argsstring>
        <name>DMA_test_routine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="182" column="5" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="182" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1a062c6cfa4fd500a3e2d9306436771653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int close_DMA</definition>
        <argsstring>()</argsstring>
        <name>close_DMA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="237" column="5" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="237" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1a244c02d1a957da140c5273bee4a01cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CheckData</definition>
        <argsstring>(int Length, u8 StartValue)</argsstring>
        <name>CheckData</name>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <param>
          <type>u8</type>
          <declname>StartValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="263" column="5" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="263" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1afa5bdb508415a6cc4d9ef0411de10d50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TxCallBack</definition>
        <argsstring>(XAxiDma_BdRing *TxRingPtr)</argsstring>
        <name>TxCallBack</name>
        <param>
          <type>XAxiDma_BdRing *</type>
          <declname>TxRingPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="305" column="6" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="305" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1a4f411d53a8c6984cb6209fa8fbb81859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TxIntrHandler</definition>
        <argsstring>(void *Callback)</argsstring>
        <name>TxIntrHandler</name>
        <param>
          <type>void *</type>
          <declname>Callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="372" column="6" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="372" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1afac6b6ceaaf7e816a7136342107ceb8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RxCallBack_back</definition>
        <argsstring>(XAxiDma_BdRing *RxRingPtr)</argsstring>
        <name>RxCallBack_back</name>
        <param>
          <type>XAxiDma_BdRing *</type>
          <declname>RxRingPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="443" column="6" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="443" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1a09f61fd854b66d68484441b69fadadc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void process_n_send_data</definition>
        <argsstring>(int cont, int max_count)</argsstring>
        <name>process_n_send_data</name>
        <param>
          <type>int</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Verifies DMA completed data transfer</para>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="477" column="6" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="477" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1ad7e0504080579c51b723afadb77d6d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cleanup_buffer</definition>
        <argsstring>()</argsstring>
        <name>cleanup_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="578" column="6" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="578" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1ae914239bfa80d08ef4d19de0df38cff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RxCallBack</definition>
        <argsstring>(XAxiDma_BdRing *RxRingPtr)</argsstring>
        <name>RxCallBack</name>
        <param>
          <type>XAxiDma_BdRing *</type>
          <declname>RxRingPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="601" column="6" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="601" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1a91633c2fb06c128e8181eb2e5364d524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RxIntrHandler</definition>
        <argsstring>(void *Callback)</argsstring>
        <name>RxIntrHandler</name>
        <param>
          <type>void *</type>
          <declname>Callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="629" column="6" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="629" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1a9e46b951a0da6f610d3030c2ac9c0259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SetupIntrSystem</definition>
        <argsstring>(INTC *IntcInstancePtr, XAxiDma *AxiDmaPtr, u16 TxIntrId, u16 RxIntrId)</argsstring>
        <name>SetupIntrSystem</name>
        <param>
          <type>INTC *</type>
          <declname>IntcInstancePtr</declname>
        </param>
        <param>
          <type>XAxiDma *</type>
          <declname>AxiDmaPtr</declname>
        </param>
        <param>
          <type>u16</type>
          <declname>TxIntrId</declname>
        </param>
        <param>
          <type>u16</type>
          <declname>RxIntrId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="705" column="5" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="705" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1a91e13835ea870fd2d1d20372c67f530f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DisableIntrSystem</definition>
        <argsstring>(INTC *IntcInstancePtr, u16 TxIntrId, u16 RxIntrId)</argsstring>
        <name>DisableIntrSystem</name>
        <param>
          <type>INTC *</type>
          <declname>IntcInstancePtr</declname>
        </param>
        <param>
          <type>u16</type>
          <declname>TxIntrId</declname>
        </param>
        <param>
          <type>u16</type>
          <declname>RxIntrId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function disables the interrupts for DMA engine.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>IntcInstancePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>is the pointer to the INTC component instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TxIntrId</parametername>
</parameternamelist>
<parameterdescription>
<para>is interrupt ID associated w/ DMA TX channel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RxIntrId</parametername>
</parameternamelist>
<parameterdescription>
<para>is interrupt ID associated w/ DMA RX channel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None.</para>
</simplesect>
<simplesect kind="note"><para>None. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="784" column="6" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="784" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1afb21950998d5a2d19678dbf5aa69cccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RxSetup</definition>
        <argsstring>(XAxiDma *AxiDmaInstPtr)</argsstring>
        <name>RxSetup</name>
        <param>
          <type>XAxiDma *</type>
          <declname>AxiDmaInstPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="811" column="5" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="811" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1a7febbc91fe1841cdaae28ccd7fe54539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TxSetup</definition>
        <argsstring>(XAxiDma *AxiDmaInstPtr)</argsstring>
        <name>TxSetup</name>
        <param>
          <type>XAxiDma *</type>
          <declname>AxiDmaInstPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="942" column="5" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="942" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="xaxidma__controller_8c_1a91c37f645b66ea665e6c4a59d7af1a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SendPacket</definition>
        <argsstring>(XAxiDma *AxiDmaInstPtr)</argsstring>
        <name>SendPacket</name>
        <param>
          <type>XAxiDma *</type>
          <declname>AxiDmaInstPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c" line="1021" column="5" bodyfile="base_code/MB40ch_wUART/src/xaxidma_controller.c" bodystart="1021" bodyend="1156"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/>Copyright<sp/>(C)<sp/>2010<sp/>-<sp/>2017<sp/>Xilinx,<sp/>Inc.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/>Use<sp/>of<sp/>the<sp/>Software<sp/>is<sp/>limited<sp/>solely<sp/>to<sp/>applications:</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/>(a)<sp/>running<sp/>on<sp/>a<sp/>Xilinx<sp/>device,<sp/>or</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*<sp/>(b)<sp/>that<sp/>interact<sp/>with<sp/>a<sp/>Xilinx<sp/>device<sp/>through<sp/>a<sp/>bus<sp/>or<sp/>interconnect.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*<sp/>XILINX<sp/><sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="24"><highlight class="comment">*<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="25"><highlight class="comment">*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">*</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*<sp/>Except<sp/>as<sp/>contained<sp/>in<sp/>this<sp/>notice,<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Xilinx<sp/>shall<sp/>not<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="28"><highlight class="comment">*<sp/>in<sp/>advertising<sp/>or<sp/>otherwise<sp/>to<sp/>promote<sp/>the<sp/>sale,<sp/>use<sp/>or<sp/>other<sp/>dealings<sp/>in</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*<sp/>this<sp/>Software<sp/>without<sp/>prior<sp/>written<sp/>authorization<sp/>from<sp/>Xilinx.</highlight></codeline>
<codeline lineno="30"><highlight class="comment">*</highlight></codeline>
<codeline lineno="31"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*****************************<sp/>Include<sp/>Files<sp/>*********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xaxidma_controller.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>setup_DMA(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;\r\n<sp/>#################################<sp/>\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;<sp/>¡¡¡¡¡¡¡<sp/>SETUP_DMA<sp/>!!!!!!!<sp/>\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;\r\n<sp/>#################################<sp/>\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_Config<sp/>*Config;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initial<sp/>setup<sp/>for<sp/>Uart16550<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XPAR_UARTNS550_0_BASEADDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>Uart550_Setup();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;\r\n---<sp/>Entering<sp/>main()<sp/>---<sp/>\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__aarch64__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>Xil_SetTlbAttributes(TX_BD_SPACE_BASE,<sp/>MARK_UNCACHEABLE);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>Xil_SetTlbAttributes(RX_BD_SPACE_BASE,<sp/>MARK_UNCACHEABLE);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>Config<sp/>=<sp/>XAxiDma_LookupConfig(DMA_DEV_ID);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Config)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;No<sp/>config<sp/>found<sp/>for<sp/>%d\r\n&quot;</highlight><highlight class="normal">,<sp/>DMA_DEV_ID);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>DMA<sp/>engine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_CfgInitialize(&amp;AxiDma,<sp/>Config);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!XAxiDma_HasSg(&amp;AxiDma))<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Device<sp/>configured<sp/>as<sp/>Simple<sp/>mode<sp/>\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>TX/RX<sp/>channels<sp/>to<sp/>be<sp/>ready<sp/>to<sp/>transmit<sp/>and<sp/>receive<sp/>packets<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>TxSetup(&amp;AxiDma);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>TX<sp/>setup\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>RxSetup(&amp;AxiDma);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>RX<sp/>setup\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>Interrupt<sp/>system<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>SetupIntrSystem(&amp;Intc,<sp/>&amp;AxiDma,<sp/>TX_INTR_ID,<sp/>RX_INTR_ID);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>intr<sp/>setup\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_SUCCESS;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DMA_test_routine(){</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>flags<sp/>before<sp/>start<sp/>transfer<sp/>test<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>TxDone<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>RxDone<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Send<sp/>a<sp/>packet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>SendPacket(&amp;AxiDma);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>send<sp/>packet\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Wait<sp/>TX<sp/>done<sp/>and<sp/>RX<sp/>done</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((TxDone<sp/>&lt;<sp/>NUMBER_OF_BDS_TO_TRANSFER)<sp/>||</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RxDone<sp/>&lt;<sp/>NUMBER_OF_BDS_TO_TRANSFER))<sp/>&amp;&amp;<sp/>!Error)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RxDone<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process_n_send_data(0,0);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>test<sp/>transmit%s<sp/>done,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;receive%s<sp/>done\r\n&quot;</highlight><highlight class="normal">,<sp/>TxDone?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;<sp/>not&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RxDone?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;<sp/>not&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Test<sp/>finished,<sp/>check<sp/>data</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>test<sp/>transmit<sp/>%d<sp/>done,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;receive<sp/>%d<sp/>done\r\n&quot;</highlight><highlight class="normal">,<sp/>TxDone,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RxDone);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>CheckData(MAX_PKT_LEN<sp/>*<sp/>NUMBER_OF_BDS_TO_TRANSFER,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xC);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Data<sp/>check<sp/>failed\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Successfully<sp/>ran<sp/>AXI<sp/>DMA<sp/>SG<sp/>interrupt<sp/>Example\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_SUCCESS;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>close_DMA(){</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>TX<sp/>and<sp/>RX<sp/>Ring<sp/>interrupts<sp/>and<sp/>return<sp/>success<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>DisableIntrSystem(&amp;Intc,<sp/>TX_INTR_ID,<sp/>RX_INTR_ID);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;---<sp/>Closing<sp/>DMA()<sp/>---<sp/>\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_SUCCESS;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="249"><highlight class="comment">*</highlight></codeline>
<codeline lineno="250"><highlight class="comment">*<sp/>This<sp/>function<sp/>checks<sp/>data<sp/>buffer<sp/>after<sp/>the<sp/>DMA<sp/>transfer<sp/>is<sp/>finished.</highlight></codeline>
<codeline lineno="251"><highlight class="comment">*</highlight></codeline>
<codeline lineno="252"><highlight class="comment">*<sp/>We<sp/>use<sp/>the<sp/>static<sp/>tx/rx<sp/>buffers.</highlight></codeline>
<codeline lineno="253"><highlight class="comment">*</highlight></codeline>
<codeline lineno="254"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>Length<sp/>is<sp/>the<sp/>length<sp/>to<sp/>check</highlight></codeline>
<codeline lineno="255"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>StartValue<sp/>is<sp/>the<sp/>starting<sp/>value<sp/>of<sp/>the<sp/>first<sp/>byte</highlight></codeline>
<codeline lineno="256"><highlight class="comment">*</highlight></codeline>
<codeline lineno="257"><highlight class="comment">*<sp/>@return<sp/><sp/><sp/>-<sp/>XST_SUCCESS<sp/>if<sp/>validation<sp/>is<sp/>successful</highlight></codeline>
<codeline lineno="258"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>XST_FAILURE<sp/>if<sp/>validation<sp/>fails.</highlight></codeline>
<codeline lineno="259"><highlight class="comment">*</highlight></codeline>
<codeline lineno="260"><highlight class="comment">*<sp/>@note<sp/><sp/><sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="261"><highlight class="comment">*</highlight></codeline>
<codeline lineno="262"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CheckData(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length,<sp/>u8<sp/>StartValue)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>*RxPacket;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>Value;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>RxPacket<sp/>=<sp/>(u8<sp/>*)<sp/>RX_BUFFER_BASE;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>StartValue;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Invalidate<sp/>the<sp/>DestBuffer<sp/>before<sp/>receiving<sp/>the<sp/>data,<sp/>in<sp/>case<sp/>the</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Data<sp/>Cache<sp/>is<sp/>enabled</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__aarch64__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>Xil_DCacheInvalidateRange((UINTPTR)RxPacket,<sp/>Length);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Index<sp/>=<sp/>0;<sp/>Index<sp/>&lt;<sp/>Length;<sp/>Index++)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(RxPacket[Index]<sp/>!=<sp/>Value)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Data<sp/>error<sp/>%d:<sp/>%x/%x\r\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index,<sp/>RxPacket[Index],<sp/>Value);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>XST_FAILURE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>(Value<sp/>+<sp/>1)<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_SUCCESS;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="294"><highlight class="comment">*</highlight></codeline>
<codeline lineno="295"><highlight class="comment">*<sp/>This<sp/>is<sp/>the<sp/>DMA<sp/>TX<sp/>callback<sp/>function<sp/>to<sp/>be<sp/>called<sp/>by<sp/>TX<sp/>interrupt<sp/>handler.</highlight></codeline>
<codeline lineno="296"><highlight class="comment">*<sp/>This<sp/>function<sp/>handles<sp/>BDs<sp/>finished<sp/>by<sp/>hardware.</highlight></codeline>
<codeline lineno="297"><highlight class="comment">*</highlight></codeline>
<codeline lineno="298"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>TxRingPtr<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>TX<sp/>channel<sp/>of<sp/>the<sp/>DMA<sp/>engine.</highlight></codeline>
<codeline lineno="299"><highlight class="comment">*</highlight></codeline>
<codeline lineno="300"><highlight class="comment">*<sp/>@return<sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="301"><highlight class="comment">*</highlight></codeline>
<codeline lineno="302"><highlight class="comment">*<sp/>@note<sp/><sp/><sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="303"><highlight class="comment">*</highlight></codeline>
<codeline lineno="304"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TxCallBack(XAxiDma_BdRing<sp/>*<sp/>TxRingPtr)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BdCount;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>u32<sp/>BdSts;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_Bd<sp/>*BdPtr;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_Bd<sp/>*BdCurPtr;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>all<sp/>processed<sp/>BDs<sp/>from<sp/>hardware<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>BdCount<sp/>=<sp/>XAxiDma_BdRingFromHw(TxRingPtr,<sp/>XAXIDMA_ALL_BDS,<sp/>&amp;BdPtr);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>the<sp/>BDs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>BdCurPtr<sp/>=<sp/>BdPtr;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Index<sp/>=<sp/>0;<sp/>Index<sp/>&lt;<sp/>BdCount;<sp/>Index++)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>the<sp/>status<sp/>in<sp/>each<sp/>BD</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>error<sp/>happens,<sp/>the<sp/>DMA<sp/>engine<sp/>will<sp/>be<sp/>halted<sp/>after<sp/>this</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>BD<sp/>processing<sp/>stops.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BdSts<sp/>=<sp/>XAxiDma_BdGetSts(BdCurPtr);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((BdSts<sp/>&amp;<sp/>XAXIDMA_BD_STS_ALL_ERR_MASK)<sp/>||</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!(BdSts<sp/>&amp;<sp/>XAXIDMA_BD_STS_COMPLETE_MASK)))<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Here<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>anything.<sp/>But<sp/>if<sp/>a<sp/>RTOS<sp/>is<sp/>being</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>used,<sp/>we<sp/>may<sp/>need<sp/>to<sp/>free<sp/>the<sp/>packet<sp/>buffer<sp/>attached<sp/>to</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>processed<sp/>BD</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>next<sp/>processed<sp/>BD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BdCurPtr<sp/>=<sp/>(XAxiDma_Bd<sp/>*)XAxiDma_BdRingNext(TxRingPtr,<sp/>BdCurPtr);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>all<sp/>processed<sp/>BDs<sp/>for<sp/>future<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingFree(TxRingPtr,<sp/>BdCount,<sp/>BdPtr);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!Error)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TxDone<sp/>+=<sp/>BdCount;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="358"><highlight class="comment">*</highlight></codeline>
<codeline lineno="359"><highlight class="comment">*<sp/>This<sp/>is<sp/>the<sp/>DMA<sp/>TX<sp/>Interrupt<sp/>handler<sp/>function.</highlight></codeline>
<codeline lineno="360"><highlight class="comment">*</highlight></codeline>
<codeline lineno="361"><highlight class="comment">*<sp/>It<sp/>gets<sp/>the<sp/>interrupt<sp/>status<sp/>from<sp/>the<sp/>hardware,<sp/>acknowledges<sp/>it,<sp/>and<sp/>if<sp/>any</highlight></codeline>
<codeline lineno="362"><highlight class="comment">*<sp/>error<sp/>happens,<sp/>it<sp/>resets<sp/>the<sp/>hardware.<sp/>Otherwise,<sp/>if<sp/>a<sp/>completion<sp/>interrupt</highlight></codeline>
<codeline lineno="363"><highlight class="comment">*<sp/>presents,<sp/>then<sp/>it<sp/>calls<sp/>the<sp/>callback<sp/>function.</highlight></codeline>
<codeline lineno="364"><highlight class="comment">*</highlight></codeline>
<codeline lineno="365"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>Callback<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>TX<sp/>channel<sp/>of<sp/>the<sp/>DMA<sp/>engine.</highlight></codeline>
<codeline lineno="366"><highlight class="comment">*</highlight></codeline>
<codeline lineno="367"><highlight class="comment">*<sp/>@return<sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="368"><highlight class="comment">*</highlight></codeline>
<codeline lineno="369"><highlight class="comment">*<sp/>@note<sp/><sp/><sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="370"><highlight class="comment">*</highlight></codeline>
<codeline lineno="371"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TxIntrHandler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Callback)</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRing<sp/>*TxRingPtr<sp/>=<sp/>(XAxiDma_BdRing<sp/>*)<sp/>Callback;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>u32<sp/>IrqStatus;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TimeOut;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>pending<sp/>interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>IrqStatus<sp/>=<sp/>XAxiDma_BdRingGetIrq(TxRingPtr);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Acknowledge<sp/>pending<sp/>interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRingAckIrq(TxRingPtr,<sp/>IrqStatus);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>no<sp/>interrupt<sp/>is<sp/>asserted,<sp/>we<sp/>do<sp/>not<sp/>do<sp/>anything</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(IrqStatus<sp/>&amp;<sp/>XAXIDMA_IRQ_ALL_MASK))<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>error<sp/>interrupt<sp/>is<sp/>asserted,<sp/>raise<sp/>error<sp/>flag,<sp/>reset<sp/>the</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>hardware<sp/>to<sp/>recover<sp/>from<sp/>the<sp/>error,<sp/>and<sp/>return<sp/>with<sp/>no<sp/>further</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>processing.</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((IrqStatus<sp/>&amp;<sp/>XAXIDMA_IRQ_ERROR_MASK))<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAxiDma_BdRingDumpRegs(TxRingPtr);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Reset<sp/>should<sp/>never<sp/>fail<sp/>for<sp/>transmit<sp/>channel</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAxiDma_Reset(&amp;AxiDma);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeOut<sp/>=<sp/>RESET_TIMEOUT_COUNTER;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(TimeOut)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XAxiDma_ResetIsDone(&amp;AxiDma))<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeOut<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>Transmit<sp/>done<sp/>interrupt<sp/>is<sp/>asserted,<sp/>call<sp/>TX<sp/>call<sp/>back<sp/>function</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>handle<sp/>the<sp/>processed<sp/>BDs<sp/>and<sp/>raise<sp/>the<sp/>according<sp/>flag</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((IrqStatus<sp/>&amp;<sp/>(XAXIDMA_IRQ_DELAY_MASK<sp/>|<sp/>XAXIDMA_IRQ_IOC_MASK)))<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TxCallBack(TxRingPtr);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="431"><highlight class="comment">*</highlight></codeline>
<codeline lineno="432"><highlight class="comment">*<sp/>This<sp/>is<sp/>the<sp/>DMA<sp/>RX<sp/>callback<sp/>function<sp/>called<sp/>by<sp/>the<sp/>RX<sp/>interrupt<sp/>handler.</highlight></codeline>
<codeline lineno="433"><highlight class="comment">*<sp/>This<sp/>function<sp/>handles<sp/>finished<sp/>BDs<sp/>by<sp/>hardware,<sp/>attaches<sp/>new<sp/>buffers<sp/>to<sp/>those</highlight></codeline>
<codeline lineno="434"><highlight class="comment">*<sp/>BDs,<sp/>and<sp/>give<sp/>them<sp/>back<sp/>to<sp/>hardware<sp/>to<sp/>receive<sp/>more<sp/>incoming<sp/>packets</highlight></codeline>
<codeline lineno="435"><highlight class="comment">*</highlight></codeline>
<codeline lineno="436"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>RxRingPtr<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>RX<sp/>channel<sp/>of<sp/>the<sp/>DMA<sp/>engine.</highlight></codeline>
<codeline lineno="437"><highlight class="comment">*</highlight></codeline>
<codeline lineno="438"><highlight class="comment">*<sp/>@return<sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="439"><highlight class="comment">*</highlight></codeline>
<codeline lineno="440"><highlight class="comment">*<sp/>@note<sp/><sp/><sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="441"><highlight class="comment">*</highlight></codeline>
<codeline lineno="442"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RxCallBack_back(XAxiDma_BdRing<sp/>*<sp/>RxRingPtr)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BdCount;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_Bd<sp/>*BdPtr;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_Bd<sp/>*BdCurPtr;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>u32<sp/>BdSts;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>finished<sp/>BDs<sp/>from<sp/>hardware<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>BdCount<sp/>=<sp/>XAxiDma_BdRingFromHw(RxRingPtr,<sp/>XAXIDMA_ALL_BDS,<sp/>&amp;BdPtr);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;INFO:<sp/>received<sp/>packet<sp/>%d\r\n&quot;</highlight><highlight class="normal">,RxDone);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>BdCurPtr<sp/>=<sp/>BdPtr;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Index<sp/>=<sp/>0;<sp/>Index<sp/>&lt;<sp/>BdCount;<sp/>Index++)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>the<sp/>flags<sp/>set<sp/>by<sp/>the<sp/>hardware<sp/>for<sp/>status</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>error<sp/>happens,<sp/>processing<sp/>stops,<sp/>because<sp/>the<sp/>DMA<sp/>engine</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>halted<sp/>after<sp/>this<sp/>BD.</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BdSts<sp/>=<sp/>XAxiDma_BdGetSts(BdCurPtr);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((BdSts<sp/>&amp;<sp/>XAXIDMA_BD_STS_ALL_ERR_MASK)<sp/>||</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!(BdSts<sp/>&amp;<sp/>XAXIDMA_BD_STS_COMPLETE_MASK)))<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>next<sp/>processed<sp/>BD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BdCurPtr<sp/>=<sp/>(XAxiDma_Bd<sp/>*)XAxiDma_BdRingNext(RxRingPtr,<sp/>BdCurPtr);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RxDone<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_n_send_data(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cont,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_count){</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">/*TODO</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/>-<sp/>agregar<sp/>una<sp/>forma<sp/>mas<sp/>inteligente<sp/>de<sp/>determinar<sp/>cuando<sp/>se<sp/>acaba<sp/>el<sp/>evento,<sp/>ejemplo<sp/>cuando<sp/>los<sp/>caracteres<sp/>no<sp/>los<sp/>ocupados</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*<sp/>-<sp/>tal<sp/>vez<sp/>haya<sp/>alguna<sp/>forma<sp/>de<sp/>saber<sp/>el<sp/>largo<sp/>del<sp/>stream<sp/>recibido</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BdCount;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_Bd<sp/>*BdPtr;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XAxiDma_Bd<sp/>*BdCurPtr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//u32<sp/>BdSts;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>valid;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRing<sp/>*RxRingPtr<sp/>=<sp/>XAxiDma_GetRxRing(&amp;AxiDma);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>finished<sp/>BDs<sp/>from<sp/>hardware<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//read_pointer<sp/>solo<sp/>se<sp/>inicializa<sp/>al<sp/>comienzo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cont<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>BdCount<sp/>=<sp/>XAxiDma_BdRingFromHw(RxRingPtr,<sp/>NUMBER_OF_BDS_PER_PKT,<sp/>&amp;BdPtr);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;$$$Bdcounts<sp/>#<sp/>%d<sp/>\n<sp/>&quot;</highlight><highlight class="normal">,BdCount);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>read_pointer<sp/>=<sp/>XAxiDma_BdGetBufAddr(BdPtr);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/>buffer_length);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Inicia<sp/>read_pointer<sp/>0x232d<sp/><sp/>lo<sp/>que<sp/>equivale<sp/>a<sp/>#-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*int<sp/>timeout<sp/>=<sp/>1000000;<sp/><sp/>//<sp/>Set<sp/>an<sp/>appropriate<sp/>timeout<sp/>based<sp/>on<sp/>expected<sp/>DMA<sp/>completion<sp/>time</highlight></codeline>
<codeline lineno="507"><highlight class="comment"></highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Wait<sp/>for<sp/>DMA<sp/>completion<sp/>or<sp/>timeout</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/><sp/>while<sp/>(RxDone<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>timeout<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout--;</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="comment"></highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(RxDone<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(&quot;DMA<sp/>transfer<sp/>did<sp/>not<sp/>complete<sp/>within<sp/>timeout\n&quot;);</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//return;<sp/><sp/>//<sp/>Handle<sp/>the<sp/>timeout<sp/>error,<sp/>possibly<sp/>by<sp/>resetting<sp/>DMA<sp/>or<sp/>logging<sp/>an<sp/>error</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="comment"></highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Test<sp/>DMA</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/><sp/><sp/>u32<sp/>dmaStatus<sp/>=<sp/>XAxiDma_ReadReg(XPAR_AXI_DMA_0_BASEADDR,<sp/>XAXIDMA_SR_OFFSET);</highlight></codeline>
<codeline lineno="520"><highlight class="comment"></highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>if<sp/>the<sp/>DMA<sp/>is<sp/>idle<sp/>or<sp/>completed</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(dmaStatus<sp/>&amp;<sp/>XAXIDMA_IDLE_MASK)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(&quot;DMA<sp/>is<sp/>ready<sp/>for<sp/>reading\n&quot;);</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(&quot;DMA<sp/>is<sp/>still<sp/>busy\n&quot;);</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;$read_pointer<sp/>address:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>&amp;read_pointer);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cont<sp/>&lt;<sp/>max_count){</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(buffer,read_pointer+buffer_length*cont,buffer_length);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//buffer[7501]=&apos;\0&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;$$$$<sp/>address<sp/>read<sp/>pointer:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><sp/>&amp;(read_pointer[TCP_SND_BUF*(cont)]));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAxiDma_BdRingFree(RxRingPtr,<sp/>NUMBER_OF_BDS_PER_PKT,<sp/>BdPtr);<sp/></highlight><highlight class="comment">//c_glob_ev<sp/>==<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RxDone<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;\n<sp/>PASAMOS<sp/>EL<sp/>IF\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//start_send_event<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i&lt;<sp/>1000;<sp/>i=i+4){</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((i-12)%36<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="550"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(&quot;%c%c%c%c&quot;,read_pointer[i],read_pointer[i+1],read_pointer[i+2],read_pointer[i+3]);</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(read_pointer[i+1]<sp/>==<sp/>&apos;4&apos;){</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(read_pointer[i+2]<sp/>==<sp/>&apos;0&apos;)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(read_pointer[i+3]<sp/>==<sp/>&apos;D&apos;<sp/>){</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(&quot;%c&quot;,read_pointer[i]);</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(buff2,4,&quot;%c%c%c%c&quot;,(read_pointer[i]),read_pointer[i+1],read_pointer[i+2],read_pointer[i+3]);</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(&quot;%s\n&quot;,buff2);</highlight></codeline>
<codeline lineno="562"><highlight class="comment"></highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(buffer,buff2);</highlight></codeline>
<codeline lineno="564"><highlight class="comment"></highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//transfer_data(buffer);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//move<sp/>the<sp/>read<sp/>pointer<sp/>to<sp/>the<sp/>next<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>read_pointer<sp/>=<sp/>read_pointer<sp/>+<sp/>MAX_PKT_LEN;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(read_pointer<sp/>&gt;=<sp/>RX_BUFFER_HIGH){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>read_pointer<sp/>=<sp/>RX_BUFFER_BASE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>space<sp/>already<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup_buffer(){</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BdCount;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_Bd<sp/>*BdPtr;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(RxDone<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAxiDma_BdRing<sp/>*RxRingPtr<sp/>=<sp/>XAxiDma_GetRxRing(&amp;AxiDma);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>finished<sp/>BDs<sp/>from<sp/>hardware<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BdCount<sp/>=<sp/>XAxiDma_BdRingFromHw(RxRingPtr,<sp/>NUMBER_OF_BDS_PER_PKT,<sp/>&amp;BdPtr);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Xil_DCacheInvalidateRange((UINTPTR)read_pointer,<sp/>NUMBER_OF_BDS_PER_PKT<sp/>*<sp/>MAX_PKT_LEN);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Xil_DCacheFlushRange((UINTPTR)read_pointer,<sp/>NUMBER_OF_BDS_PER_PKT<sp/>*<sp/>MAX_PKT_LEN);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//move<sp/>the<sp/>read<sp/>pointer<sp/>to<sp/>the<sp/>next<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>read_pointer<sp/>=<sp/>read_pointer<sp/>+<sp/>MAX_PKT_LEN;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(read_pointer<sp/>&gt;=<sp/>RX_BUFFER_HIGH){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_pointer<sp/>=<sp/>RX_BUFFER_BASE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>space<sp/>already<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAxiDma_BdRingFree(RxRingPtr,<sp/>NUMBER_OF_BDS_PER_PKT,<sp/>BdPtr);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RxDone<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RxCallBack(XAxiDma_BdRing<sp/>*<sp/>RxRingPtr)</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;INFO:<sp/>received<sp/>packet<sp/>%d\r\n&quot;</highlight><highlight class="normal">,RxDone);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>RxDone<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RxDone<sp/>&gt;<sp/>n_events<sp/>-<sp/>1){</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XGpio_DiscreteSet(&amp;gpio,2,VETO_mask);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="615"><highlight class="comment">*</highlight></codeline>
<codeline lineno="616"><highlight class="comment">*<sp/>This<sp/>is<sp/>the<sp/>DMA<sp/>RX<sp/>interrupt<sp/>handler<sp/>function</highlight></codeline>
<codeline lineno="617"><highlight class="comment">*</highlight></codeline>
<codeline lineno="618"><highlight class="comment">*<sp/>It<sp/>gets<sp/>the<sp/>interrupt<sp/>status<sp/>from<sp/>the<sp/>hardware,<sp/>acknowledges<sp/>it,<sp/>and<sp/>if<sp/>any</highlight></codeline>
<codeline lineno="619"><highlight class="comment">*<sp/>error<sp/>happens,<sp/>it<sp/>resets<sp/>the<sp/>hardware.<sp/>Otherwise,<sp/>if<sp/>a<sp/>completion<sp/>interrupt</highlight></codeline>
<codeline lineno="620"><highlight class="comment">*<sp/>presents,<sp/>then<sp/>it<sp/>calls<sp/>the<sp/>callback<sp/>function.</highlight></codeline>
<codeline lineno="621"><highlight class="comment">*</highlight></codeline>
<codeline lineno="622"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>Callback<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>RX<sp/>channel<sp/>of<sp/>the<sp/>DMA<sp/>engine.</highlight></codeline>
<codeline lineno="623"><highlight class="comment">*</highlight></codeline>
<codeline lineno="624"><highlight class="comment">*<sp/>@return<sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="625"><highlight class="comment">*</highlight></codeline>
<codeline lineno="626"><highlight class="comment">*<sp/>@note<sp/><sp/><sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="627"><highlight class="comment">*</highlight></codeline>
<codeline lineno="628"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RxIntrHandler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Callback)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRing<sp/>*RxRingPtr<sp/>=<sp/>(XAxiDma_BdRing<sp/>*)<sp/>Callback;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>u32<sp/>IrqStatus;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TimeOut;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>pending<sp/>interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>IrqStatus<sp/>=<sp/>XAxiDma_BdRingGetIrq(RxRingPtr);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Acknowledge<sp/>pending<sp/>interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRingAckIrq(RxRingPtr,<sp/>IrqStatus);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>no<sp/>interrupt<sp/>is<sp/>asserted,<sp/>we<sp/>do<sp/>not<sp/>do<sp/>anything</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(IrqStatus<sp/>&amp;<sp/>XAXIDMA_IRQ_ALL_MASK))<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>error<sp/>interrupt<sp/>is<sp/>asserted,<sp/>raise<sp/>error<sp/>flag,<sp/>reset<sp/>the</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>hardware<sp/>to<sp/>recover<sp/>from<sp/>the<sp/>error,<sp/>and<sp/>return<sp/>with<sp/>no<sp/>further</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>processing.</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((IrqStatus<sp/>&amp;<sp/>XAXIDMA_IRQ_ERROR_MASK))<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAxiDma_BdRingDumpRegs(RxRingPtr);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>could<sp/>fail<sp/>and<sp/>hang</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>NEED<sp/>a<sp/>way<sp/>to<sp/>handle<sp/>this<sp/>or<sp/>do<sp/>not<sp/>call<sp/>it??</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAxiDma_Reset(&amp;AxiDma);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeOut<sp/>=<sp/>RESET_TIMEOUT_COUNTER;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(TimeOut)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(XAxiDma_ResetIsDone(&amp;AxiDma))<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeOut<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>completion<sp/>interrupt<sp/>is<sp/>asserted,<sp/>call<sp/>RX<sp/>call<sp/>back<sp/>function</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>handle<sp/>the<sp/>processed<sp/>BDs<sp/>and<sp/>then<sp/>raise<sp/>the<sp/>according<sp/>flag.</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((IrqStatus<sp/>&amp;<sp/>(XAXIDMA_IRQ_DELAY_MASK<sp/>|<sp/>XAXIDMA_IRQ_IOC_MASK)))<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RxCallBack(RxRingPtr);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="688"><highlight class="comment">*</highlight></codeline>
<codeline lineno="689"><highlight class="comment">*<sp/>This<sp/>function<sp/>setups<sp/>the<sp/>interrupt<sp/>system<sp/>so<sp/>interrupts<sp/>can<sp/>occur<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="690"><highlight class="comment">*<sp/>DMA,<sp/>it<sp/>assumes<sp/>INTC<sp/>component<sp/>exists<sp/>in<sp/>the<sp/>hardware<sp/>system.</highlight></codeline>
<codeline lineno="691"><highlight class="comment">*</highlight></codeline>
<codeline lineno="692"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>IntcInstancePtr<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>instance<sp/>of<sp/>the<sp/>INTC.</highlight></codeline>
<codeline lineno="693"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>AxiDmaPtr<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>instance<sp/>of<sp/>the<sp/>DMA<sp/>engine</highlight></codeline>
<codeline lineno="694"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>TxIntrId<sp/>is<sp/>the<sp/>TX<sp/>channel<sp/>Interrupt<sp/>ID.</highlight></codeline>
<codeline lineno="695"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>RxIntrId<sp/>is<sp/>the<sp/>RX<sp/>channel<sp/>Interrupt<sp/>ID.</highlight></codeline>
<codeline lineno="696"><highlight class="comment">*</highlight></codeline>
<codeline lineno="697"><highlight class="comment">*<sp/>@return</highlight></codeline>
<codeline lineno="698"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>XST_SUCCESS<sp/>if<sp/>successful,</highlight></codeline>
<codeline lineno="699"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>XST_FAILURE.if<sp/>not<sp/>succesful</highlight></codeline>
<codeline lineno="700"><highlight class="comment">*</highlight></codeline>
<codeline lineno="701"><highlight class="comment">*<sp/>@note<sp/><sp/><sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="702"><highlight class="comment">*</highlight></codeline>
<codeline lineno="703"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetupIntrSystem(INTC<sp/>*<sp/>IntcInstancePtr,</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAxiDma<sp/>*<sp/>AxiDmaPtr,<sp/>u16<sp/>TxIntrId,<sp/>u16<sp/>RxIntrId)</highlight></codeline>
<codeline lineno="707"><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRing<sp/>*TxRingPtr<sp/>=<sp/>XAxiDma_GetTxRing(AxiDmaPtr);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRing<sp/>*RxRingPtr<sp/>=<sp/>XAxiDma_GetRxRing(AxiDmaPtr);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>XScuGic_Config<sp/>*IntcConfig;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Initialize<sp/>the<sp/>interrupt<sp/>controller<sp/>driver<sp/>so<sp/>that<sp/>it<sp/>is<sp/>ready<sp/>to</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>use.</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>IntcConfig<sp/>=<sp/>XScuGic_LookupConfig(INTC_DEVICE_ID);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;IntCConfig<sp/>DMA<sp/>status:<sp/>%d<sp/>%d<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>IntcConfig-&gt;DistBaseAddress,<sp/>IntcConfig-&gt;HandlerTable);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>==<sp/>IntcConfig)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XScuGic_CfgInitialize(IntcInstancePtr,<sp/>IntcConfig,<sp/>IntcConfig-&gt;CpuBaseAddress);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>XScuGic_SetPriorityTriggerType(IntcInstancePtr,<sp/>TxIntrId,<sp/>0xA0,<sp/>0x3);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>XScuGic_SetPriorityTriggerType(IntcInstancePtr,<sp/>RxIntrId,<sp/>0xA0,<sp/>0x3);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Connect<sp/>the<sp/>device<sp/>driver<sp/>handler<sp/>that<sp/>will<sp/>be<sp/>called<sp/>when<sp/>an</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>interrupt<sp/>for<sp/>the<sp/>device<sp/>occurs,<sp/>the<sp/>handler<sp/>defined<sp/>above<sp/>performs</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>specific<sp/>interrupt<sp/>processing<sp/>for<sp/>the<sp/>device.</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XScuGic_Connect(IntcInstancePtr,<sp/>TxIntrId,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Xil_InterruptHandler)TxIntrHandler,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TxRingPtr);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XScuGic_Connect(IntcInstancePtr,<sp/>RxIntrId,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Xil_InterruptHandler)RxIntrHandler,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RxRingPtr);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>XScuGic_Enable(IntcInstancePtr,<sp/>TxIntrId);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>XScuGic_Enable(IntcInstancePtr,<sp/>RxIntrId);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>interrupts<sp/>from<sp/>the<sp/>hardware<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>Xil_ExceptionInit();</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Xil_ExceptionHandler)INTC_HANDLER,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)IntcInstancePtr);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>Xil_ExceptionEnable();</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_SUCCESS;</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DisableIntrSystem(INTC<sp/>*<sp/>IntcInstancePtr,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u16<sp/>TxIntrId,<sp/>u16<sp/>RxIntrId)</highlight></codeline>
<codeline lineno="786"><highlight class="normal">{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XPAR_INTC_0_DEVICE_ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disconnect<sp/>the<sp/>interrupts<sp/>for<sp/>the<sp/>DMA<sp/>TX<sp/>and<sp/>RX<sp/>channels<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>XIntc_Disconnect(IntcInstancePtr,<sp/>TxIntrId);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>XIntc_Disconnect(IntcInstancePtr,<sp/>RxIntrId);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>XScuGic_Disconnect(IntcInstancePtr,<sp/>TxIntrId);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>XScuGic_Disconnect(IntcInstancePtr,<sp/>RxIntrId);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="799"><highlight class="comment">*</highlight></codeline>
<codeline lineno="800"><highlight class="comment">*<sp/>This<sp/>function<sp/>sets<sp/>up<sp/>RX<sp/>channel<sp/>of<sp/>the<sp/>DMA<sp/>engine<sp/>to<sp/>be<sp/>ready<sp/>for<sp/>packet</highlight></codeline>
<codeline lineno="801"><highlight class="comment">*<sp/>reception</highlight></codeline>
<codeline lineno="802"><highlight class="comment">*</highlight></codeline>
<codeline lineno="803"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>AxiDmaInstPtr<sp/>is<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>instance<sp/>of<sp/>the<sp/>DMA<sp/>engine.</highlight></codeline>
<codeline lineno="804"><highlight class="comment">*</highlight></codeline>
<codeline lineno="805"><highlight class="comment">*<sp/>@return<sp/><sp/><sp/>-<sp/>XST_SUCCESS<sp/>if<sp/>the<sp/>setup<sp/>is<sp/>successful.</highlight></codeline>
<codeline lineno="806"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>XST_FAILURE<sp/>if<sp/>fails.</highlight></codeline>
<codeline lineno="807"><highlight class="comment">*</highlight></codeline>
<codeline lineno="808"><highlight class="comment">*<sp/>@note<sp/><sp/><sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="809"><highlight class="comment">*</highlight></codeline>
<codeline lineno="810"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RxSetup(XAxiDma<sp/>*<sp/>AxiDmaInstPtr)</highlight></codeline>
<codeline lineno="812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRing<sp/>*RxRingPtr;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_Bd<sp/>BdTemplate;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_Bd<sp/>*BdPtr;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_Bd<sp/>*BdCurPtr;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BdCount;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FreeBdCount;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>UINTPTR<sp/>RxBufferPtr;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>n_events<sp/>=<sp/>MAX_STORED_EVENTS;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>RxRingPtr<sp/>=<sp/>XAxiDma_GetRxRing(&amp;AxiDma);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>all<sp/>RX<sp/>interrupts<sp/>before<sp/>RxBD<sp/>space<sp/>setup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRingIntDisable(RxRingPtr,<sp/>XAXIDMA_IRQ_ALL_MASK);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Setup<sp/>Rx<sp/>BD<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>BdCount<sp/>=<sp/>XAxiDma_BdRingCntCalc(XAXIDMA_BD_MINIMUM_ALIGNMENT,</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RX_BD_SPACE_HIGH<sp/>-<sp/>RX_BD_SPACE_BASE<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingCreate(RxRingPtr,<sp/>RX_BD_SPACE_BASE,</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RX_BD_SPACE_BASE,</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAXIDMA_BD_MINIMUM_ALIGNMENT,<sp/>BdCount);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Rx<sp/>bd<sp/>create<sp/>failed<sp/>with<sp/>%d\r\n&quot;</highlight><highlight class="normal">,<sp/>Status);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>a<sp/>BD<sp/>template<sp/>for<sp/>the<sp/>Rx<sp/>channel.<sp/>Then<sp/>copy<sp/>it<sp/>to<sp/>every<sp/>RX<sp/>BD.</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdClear(&amp;BdTemplate);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingClone(RxRingPtr,<sp/>&amp;BdTemplate);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Rx<sp/>bd<sp/>clone<sp/>failed<sp/>with<sp/>%d\r\n&quot;</highlight><highlight class="normal">,<sp/>Status);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Attach<sp/>buffers<sp/>to<sp/>RxBD<sp/>ring<sp/>so<sp/>we<sp/>are<sp/>ready<sp/>to<sp/>receive<sp/>packets<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>FreeBdCount<sp/>=<sp/>XAxiDma_BdRingGetFreeCnt(RxRingPtr);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;INFO:<sp/>there<sp/>are<sp/>%d<sp/>free<sp/>BDs\r\n&quot;</highlight><highlight class="normal">,<sp/>FreeBdCount);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingAlloc(RxRingPtr,<sp/>FreeBdCount,<sp/>&amp;BdPtr);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Rx<sp/>bd<sp/>alloc<sp/>failed<sp/>with<sp/>%d\r\n&quot;</highlight><highlight class="normal">,<sp/>Status);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>BdCurPtr<sp/>=<sp/>BdPtr;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>RxBufferPtr<sp/>=<sp/>RX_BUFFER_BASE;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Index<sp/>=<sp/>0;<sp/>Index<sp/>&lt;<sp/>FreeBdCount;<sp/>Index++)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdSetBufAddr(BdCurPtr,<sp/>RxBufferPtr);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Rx<sp/>set<sp/>buffer<sp/>addr<sp/>%x<sp/>on<sp/>BD<sp/>%x<sp/>failed<sp/>%d\r\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)RxBufferPtr,</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(UINTPTR)BdCurPtr,<sp/>Status);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdSetLength(BdCurPtr,<sp/>MAX_PKT_LEN,</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RxRingPtr-&gt;MaxTransferLen);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Rx<sp/>set<sp/>length<sp/>%d<sp/>on<sp/>BD<sp/>%x<sp/>failed<sp/>%d\r\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAX_PKT_LEN,<sp/>(UINTPTR)BdCurPtr,<sp/>Status);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Receive<sp/>BDs<sp/>do<sp/>not<sp/>need<sp/>to<sp/>set<sp/>anything<sp/>for<sp/>the<sp/>control</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>hardware<sp/>will<sp/>set<sp/>the<sp/>SOF/EOF<sp/>bits<sp/>per<sp/>stream<sp/>status</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAxiDma_BdSetCtrl(BdCurPtr,<sp/>0);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAxiDma_BdSetId(BdCurPtr,<sp/>RxBufferPtr);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RxBufferPtr<sp/>+=<sp/>MAX_PKT_LEN;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BdCurPtr<sp/>=<sp/>(XAxiDma_Bd<sp/>*)XAxiDma_BdRingNext(RxRingPtr,<sp/>BdCurPtr);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Set<sp/>the<sp/>coalescing<sp/>threshold,<sp/>so<sp/>only<sp/>one<sp/>receive<sp/>interrupt</highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>occurs<sp/>for<sp/>this<sp/>example</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>you<sp/>would<sp/>like<sp/>to<sp/>have<sp/>multiple<sp/>interrupts<sp/>to<sp/>happen,<sp/>change</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>COALESCING_COUNT<sp/>to<sp/>be<sp/>a<sp/>smaller<sp/>value</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingSetCoalesce(RxRingPtr,<sp/>COALESCING_COUNT,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DELAY_TIMER_COUNT);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Rx<sp/>set<sp/>coalesce<sp/>failed<sp/>with<sp/>%d\r\n&quot;</highlight><highlight class="normal">,<sp/>Status);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingToHw(RxRingPtr,<sp/>FreeBdCount,<sp/>BdPtr);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Rx<sp/>ToHw<sp/>failed<sp/>with<sp/>%d\r\n&quot;</highlight><highlight class="normal">,<sp/>Status);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>all<sp/>RX<sp/>interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRingIntEnable(RxRingPtr,<sp/>XAXIDMA_IRQ_ALL_MASK);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>RX<sp/>DMA<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingStart(RxRingPtr);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Rx<sp/>start<sp/>BD<sp/>ring<sp/>failed<sp/>with<sp/>%d\r\n&quot;</highlight><highlight class="normal">,<sp/>Status);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_SUCCESS;</highlight></codeline>
<codeline lineno="926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="930"><highlight class="comment">*</highlight></codeline>
<codeline lineno="931"><highlight class="comment">*<sp/>This<sp/>function<sp/>sets<sp/>up<sp/>the<sp/>TX<sp/>channel<sp/>of<sp/>a<sp/>DMA<sp/>engine<sp/>to<sp/>be<sp/>ready<sp/>for<sp/>packet</highlight></codeline>
<codeline lineno="932"><highlight class="comment">*<sp/>transmission.</highlight></codeline>
<codeline lineno="933"><highlight class="comment">*</highlight></codeline>
<codeline lineno="934"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>AxiDmaInstPtr<sp/>is<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>instance<sp/>of<sp/>the<sp/>DMA<sp/>engine.</highlight></codeline>
<codeline lineno="935"><highlight class="comment">*</highlight></codeline>
<codeline lineno="936"><highlight class="comment">*<sp/>@return<sp/><sp/><sp/>-<sp/>XST_SUCCESS<sp/>if<sp/>the<sp/>setup<sp/>is<sp/>successful.</highlight></codeline>
<codeline lineno="937"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>XST_FAILURE<sp/>otherwise.</highlight></codeline>
<codeline lineno="938"><highlight class="comment">*</highlight></codeline>
<codeline lineno="939"><highlight class="comment">*<sp/>@note<sp/><sp/><sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="940"><highlight class="comment">*</highlight></codeline>
<codeline lineno="941"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TxSetup(XAxiDma<sp/>*<sp/>AxiDmaInstPtr)</highlight></codeline>
<codeline lineno="943"><highlight class="normal">{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRing<sp/>*TxRingPtr<sp/>=<sp/>XAxiDma_GetTxRing(&amp;AxiDma);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_Bd<sp/>BdTemplate;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>u32<sp/>BdCount;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>all<sp/>TX<sp/>interrupts<sp/>before<sp/>TxBD<sp/>space<sp/>setup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRingIntDisable(TxRingPtr,<sp/>XAXIDMA_IRQ_ALL_MASK);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Setup<sp/>TxBD<sp/>space<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>BdCount<sp/>=<sp/>XAxiDma_BdRingCntCalc(XAXIDMA_BD_MINIMUM_ALIGNMENT,</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(UINTPTR)TX_BD_SPACE_HIGH<sp/>-<sp/>(UINTPTR)TX_BD_SPACE_BASE<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingCreate(TxRingPtr,<sp/>TX_BD_SPACE_BASE,</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TX_BD_SPACE_BASE,</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAXIDMA_BD_MINIMUM_ALIGNMENT,<sp/>BdCount);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>create<sp/>BD<sp/>ring\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Like<sp/>the<sp/>RxBD<sp/>space,<sp/>we<sp/>create<sp/>a<sp/>template<sp/>and<sp/>set<sp/>all<sp/>BDs<sp/>to<sp/>be<sp/>the</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>same<sp/>as<sp/>the<sp/>template.<sp/>The<sp/>sender<sp/>has<sp/>to<sp/>set<sp/>up<sp/>the<sp/>BDs<sp/>as<sp/>needed.</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdClear(&amp;BdTemplate);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingClone(TxRingPtr,<sp/>&amp;BdTemplate);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>clone<sp/>BDs\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Set<sp/>the<sp/>coalescing<sp/>threshold,<sp/>so<sp/>only<sp/>one<sp/>transmit<sp/>interrupt</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>occurs<sp/>for<sp/>this<sp/>example</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>you<sp/>would<sp/>like<sp/>to<sp/>have<sp/>multiple<sp/>interrupts<sp/>to<sp/>happen,<sp/>change</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>COALESCING_COUNT<sp/>to<sp/>be<sp/>a<sp/>smaller<sp/>value</highlight></codeline>
<codeline lineno="983"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingSetCoalesce(TxRingPtr,<sp/>COALESCING_COUNT,</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DELAY_TIMER_COUNT);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>set<sp/>coalescing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>%d/%d\r\n&quot;</highlight><highlight class="normal">,COALESCING_COUNT,<sp/>DELAY_TIMER_COUNT);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>all<sp/>TX<sp/>interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRingIntEnable(TxRingPtr,<sp/>XAXIDMA_IRQ_ALL_MASK);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>the<sp/>TX<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingStart(TxRingPtr);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>bd<sp/>start\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_SUCCESS;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1009"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1010"><highlight class="comment">*<sp/>This<sp/>function<sp/>non-blockingly<sp/>transmits<sp/>all<sp/>packets<sp/>through<sp/>the<sp/>DMA<sp/>engine.</highlight></codeline>
<codeline lineno="1011"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1012"><highlight class="comment">*<sp/>@param<sp/><sp/><sp/><sp/>AxiDmaInstPtr<sp/>points<sp/>to<sp/>the<sp/>DMA<sp/>engine<sp/>instance</highlight></codeline>
<codeline lineno="1013"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1014"><highlight class="comment">*<sp/>@return</highlight></codeline>
<codeline lineno="1015"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>XST_SUCCESS<sp/>if<sp/>the<sp/>DMA<sp/>accepts<sp/>all<sp/>the<sp/>packets<sp/>successfully,</highlight></codeline>
<codeline lineno="1016"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>XST_FAILURE<sp/>if<sp/>error<sp/>occurs</highlight></codeline>
<codeline lineno="1017"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1018"><highlight class="comment">*<sp/>@note<sp/><sp/><sp/><sp/><sp/>None.</highlight></codeline>
<codeline lineno="1019"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1020"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SendPacket(XAxiDma<sp/>*<sp/>AxiDmaInstPtr)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_BdRing<sp/>*TxRingPtr<sp/>=<sp/>XAxiDma_GetTxRing(AxiDmaInstPtr);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>*TxPacket;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>u8<sp/>Value;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>XAxiDma_Bd<sp/>*BdPtr,<sp/>*BdCurPtr;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Status;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>Pkts;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>UINTPTR<sp/>BufferAddr;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Each<sp/>packet<sp/>is<sp/>limited<sp/>to<sp/>TxRingPtr-&gt;MaxTransferLen</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>will<sp/>not<sp/>be<sp/>the<sp/>case<sp/>if<sp/>hardware<sp/>has<sp/>store<sp/>and<sp/>forward<sp/>built<sp/>in</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MAX_PKT_LEN<sp/>*<sp/>NUMBER_OF_BDS_PER_PKT<sp/>&gt;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TxRingPtr-&gt;MaxTransferLen)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>total<sp/>per<sp/>packet<sp/>transfer<sp/>length<sp/>for<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;packet<sp/>%d/%d\r\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAX_PKT_LEN<sp/>*<sp/>NUMBER_OF_BDS_PER_PKT,</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TxRingPtr-&gt;MaxTransferLen);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_INVALID_PARAM;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;INFO:<sp/>max<sp/>transfer<sp/>length<sp/>for<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;packet<sp/>%d\r\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TxRingPtr-&gt;MaxTransferLen);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>TxPacket<sp/>=<sp/>(u8<sp/>*)<sp/>Packet;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>0xC;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Index<sp/>=<sp/>0;<sp/>Index<sp/>&lt;<sp/>MAX_PKT_LEN<sp/>*<sp/>NUMBER_OF_BDS_TO_TRANSFER;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>++)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TxPacket[Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>(Value<sp/>+<sp/>1)<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flush<sp/>the<sp/>SrcBuffer<sp/>before<sp/>the<sp/>DMA<sp/>transfer,<sp/>in<sp/>case<sp/>the<sp/>Data<sp/>Cache</highlight></codeline>
<codeline lineno="1061"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>enabled</highlight></codeline>
<codeline lineno="1062"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>Xil_DCacheFlushRange((UINTPTR)TxPacket,<sp/>MAX_PKT_LEN<sp/>*</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NUMBER_OF_BDS_TO_TRANSFER);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__aarch64__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>Xil_DCacheFlushRange((UINTPTR)RX_BUFFER_BASE,<sp/>MAX_PKT_LEN<sp/>*</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NUMBER_OF_BDS_TO_TRANSFER);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingAlloc(TxRingPtr,<sp/>NUMBER_OF_BDS_TO_TRANSFER,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;BdPtr);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>bd<sp/>alloc\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>BufferAddr<sp/>=<sp/>(UINTPTR)Packet;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>BdCurPtr<sp/>=<sp/>BdPtr;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Set<sp/>up<sp/>the<sp/>BD<sp/>using<sp/>the<sp/>information<sp/>of<sp/>the<sp/>packet<sp/>to<sp/>transmit</highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Each<sp/>transfer<sp/>has<sp/>NUMBER_OF_BDS_PER_PKT<sp/>BDs</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Index<sp/>=<sp/>0;<sp/>Index<sp/>&lt;<sp/>NUMBER_OF_PKTS_TO_TRANSFER;<sp/>Index++)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(Pkts<sp/>=<sp/>0;<sp/>Pkts<sp/>&lt;<sp/>NUMBER_OF_BDS_PER_PKT;<sp/>Pkts++)<sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32<sp/>CrBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdSetBufAddr(BdCurPtr,<sp/>BufferAddr);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Tx<sp/>set<sp/>buffer<sp/>addr<sp/>%x<sp/>on<sp/>BD<sp/>%x<sp/>failed<sp/>%d\r\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)BufferAddr,</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(UINTPTR)BdCurPtr,<sp/>Status);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdSetLength(BdCurPtr,<sp/>MAX_PKT_LEN,</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TxRingPtr-&gt;MaxTransferLen);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Tx<sp/>set<sp/>length<sp/>%d<sp/>on<sp/>BD<sp/>%x<sp/>failed<sp/>%d\r\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAX_PKT_LEN,<sp/>(UINTPTR)BdCurPtr,<sp/>Status);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Pkts<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>first<sp/>BD<sp/>has<sp/>SOF<sp/>set</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CrBits<sp/>|=<sp/>XAXIDMA_BD_CTRL_TXSOF_MASK;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XPAR_AXIDMA_0_SG_INCLUDE_STSCNTRL_STRM<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>first<sp/>BD<sp/>has<sp/>total<sp/>transfer<sp/>length<sp/>set</highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>the<sp/>last<sp/>APP<sp/>word,<sp/>this<sp/>is<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>loopback<sp/>widget</highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdSetAppWord(BdCurPtr,</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAXIDMA_LAST_APPWORD,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAX_PKT_LEN<sp/>*<sp/>NUMBER_OF_BDS_PER_PKT);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Set<sp/>app<sp/>word<sp/>failed<sp/>with<sp/>%d\r\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Status);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Pkts<sp/>==<sp/>(NUMBER_OF_BDS_PER_PKT<sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>last<sp/>BD<sp/>should<sp/>have<sp/>EOF<sp/>and<sp/>IOC<sp/>set</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CrBits<sp/>|=<sp/>XAXIDMA_BD_CTRL_TXEOF_MASK;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAxiDma_BdSetCtrl(BdCurPtr,<sp/>CrBits);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XAxiDma_BdSetId(BdCurPtr,<sp/>BufferAddr);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BufferAddr<sp/>+=<sp/>MAX_PKT_LEN;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BdCurPtr<sp/>=<sp/>(XAxiDma_Bd<sp/>*)XAxiDma_BdRingNext(TxRingPtr,<sp/>BdCurPtr);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Give<sp/>the<sp/>BD<sp/>to<sp/>hardware<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>=<sp/>XAxiDma_BdRingToHw(TxRingPtr,<sp/>NUMBER_OF_BDS_TO_TRANSFER,</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BdPtr);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Status<sp/>!=<sp/>XST_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xil_printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>hw,<sp/>length<sp/>%d\r\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)XAxiDma_BdGetLength(BdPtr,</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TxRingPtr-&gt;MaxTransferLen));</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_FAILURE;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XST_SUCCESS;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="base_code/MB40ch_wUART/src/xaxidma_controller.c"/>
  </compounddef>
</doxygen>
