<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="es">
  <compounddef id="gpio__handler_8c" kind="file" language="C++">
    <compoundname>gpio_handler.c</compoundname>
    <includes refid="gpio__handler_8h" local="yes">gpio_handler.h</includes>
    <incdepgraph>
      <node id="1">
        <label>base_code/MB40ch_wUART/src/gpio_handler.c</label>
        <link refid="gpio__handler_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gpio_handler.h</label>
        <link refid="gpio__handler_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>xgpio.h</label>
      </node>
      <node id="5">
        <label>xil_io.h</label>
      </node>
      <node id="3">
        <label>xil_types.h</label>
      </node>
      <node id="4">
        <label>xstatus.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="gpio__handler_8c_1a97f299c3b55dc7f075d0ca45e4628e71" prot="public" static="no" mutable="no">
        <type>u32</type>
        <definition>u32 registro</definition>
        <argsstring></argsstring>
        <name>registro</name>
        <initializer>= 0x00000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/gpio_handler.c" line="3" column="5" bodyfile="base_code/MB40ch_wUART/src/gpio_handler.c" bodystart="3" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="gpio__handler_8c_1a5a0d86535ca2e7abcdb735089d5ab78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_write_reg</definition>
        <argsstring>(u32 reg_mask, u32 reg_offset, u32 data)</argsstring>
        <name>gpio_write_reg</name>
        <param>
          <type>u32</type>
          <declname>reg_mask</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>reg_offset</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/gpio_handler.c" line="5" column="6" bodyfile="base_code/MB40ch_wUART/src/gpio_handler.c" bodystart="5" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="gpio__handler_8c_1a1ff25f0faed2ad290ec383743fe040b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_unset_reg</definition>
        <argsstring>(u32 reg_mask, u32 reg_offset, u32 data)</argsstring>
        <name>gpio_unset_reg</name>
        <param>
          <type>u32</type>
          <declname>reg_mask</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>reg_offset</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="base_code/MB40ch_wUART/src/gpio_handler.c" line="10" column="6" bodyfile="base_code/MB40ch_wUART/src/gpio_handler.c" bodystart="10" bodyend="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;gpio_handler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal">u32<sp/>registro<sp/>=<sp/>0x00000000;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_write_reg(u32<sp/>reg_mask,<sp/>u32<sp/>reg_offset,<sp/>u32<sp/>data){</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>XGpio_DiscreteWrite(&amp;gpio,2,reg_mask<sp/>&amp;<sp/>(data&lt;&lt;reg_offset));<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_unset_reg(u32<sp/>reg_mask,u32<sp/>reg_offset,u32<sp/>data){</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>XGpio_DiscreteClear(&amp;gpio,2,reg_mask<sp/>&amp;<sp/>(data&lt;&lt;reg_offset));<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="base_code/MB40ch_wUART/src/gpio_handler.c"/>
  </compounddef>
</doxygen>
