
#include <stdio.h>
 #include <string.h>
#include "xparameters.h"
#include "platform.h"
#include "platform_config.h"
#include "netif/xadapter.h"
#include "lwip/tcp.h"
#include "xil_cache.h"

#if defined (__arm__) || defined(__aarch64__)
	#include "xil_printf.h"
#endif


#if LWIP_IPV6==1
	#include "lwip/ip.h"
#else
	#if LWIP_DHCP==1
		#include "lwip/dhcp.h"
	#endif
#endif

/*hardcoded data*/

// Inclusión del header con datos masivos
#include "massive_data.h"
#include "small_data.h"


#include "line_blocker.h"


/* Declaración de funciones de lwIP */
void lwip_init();

/* defined by each RAW mode application */
// fd: no escenciales y provenientes de la plantilla
void print_app_header();

// declaracion de funciones del servidor TCP (definidas en echo.c)
int start_application();
int transfer_data();
void tcp_fasttmr(void);
void tcp_slowtmr(void);

// Definición de variables globales para lwIP y la interfaz de red
extern volatile int TcpFastTmrFlag;
extern volatile int TcpSlowTmrFlag;
static struct netif server_netif;
struct netif *echo_netif;


// fd:
#if LWIP_IPV6==0
	#if LWIP_DHCP==1
		extern volatile int dhcp_timoutcntr;
		err_t dhcp_start(struct netif *netif);
	#endif
#endif



#if LWIP_IPV6==1
	void print_ip6(char *msg, ip_addr_t *ip)
	{
		print(msg);
		xil_printf(" %x:%x:%x:%x:%x:%x:%x:%x\n\r",
				IP6_ADDR_BLOCK1(&ip->u_addr.ip6),
				IP6_ADDR_BLOCK2(&ip->u_addr.ip6),
				IP6_ADDR_BLOCK3(&ip->u_addr.ip6),
				IP6_ADDR_BLOCK4(&ip->u_addr.ip6),
				IP6_ADDR_BLOCK5(&ip->u_addr.ip6),
				IP6_ADDR_BLOCK6(&ip->u_addr.ip6),
				IP6_ADDR_BLOCK7(&ip->u_addr.ip6),
				IP6_ADDR_BLOCK8(&ip->u_addr.ip6));

	}
#else
	/*
	* print_ip: Función auxiliar para imprimir una dirección IP.
	*/
	void print_ip(char *msg, ip_addr_t *ip) {
		print(msg);
		xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip),
				ip4_addr3(ip), ip4_addr4(ip));
	}
	/*
	* print_ip_settings: Imprime la configuración completa de red (IP, netmask y gateway).
	*/
	void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw) {

		print_ip("Board IP: ", ip);
		print_ip("Netmask : ", mask);
		print_ip("Gateway : ", gw);
	}

#endif

#if defined (__arm__) && !defined (ARMR5)
	#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
		int ProgramSi5324(void);
		int ProgramSfpPhy(void);
	#endif
#endif

#ifdef XPS_BOARD_ZCU102
	#ifdef XPAR_XIICPS_0_DEVICE_ID
		int IicPhyReset(void);
	#endif
#endif


int main() {

	#if LWIP_IPV6==0
		ip_addr_t ipaddr, netmask, gw;
	#endif
	/* the mac address of the board. this should be unique per board */
	unsigned char mac_ethernet_address[] = { 0x00, 0x0a, 0x35, 0x00, 0x01, 0x02 };

	echo_netif = &server_netif;
	#if defined (__arm__) && !defined (ARMR5)
		#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
			ProgramSi5324();
			ProgramSfpPhy();
		#endif
	#endif

	/* Define this board specific macro in order perform PHY reset on ZCU102 */
	#ifdef XPS_BOARD_ZCU102
		IicPhyReset();
	#endif


	init_platform();// Inicializar la plataforma

	#if LWIP_IPV6==0
		#if LWIP_DHCP==1
			ipaddr.addr = 0;
			gw.addr = 0;
			netmask.addr = 0;
		#else
			/* initliaze IP addresses to be used */
			IP4_ADDR(&ipaddr,  192, 168,   1, 10);
			IP4_ADDR(&netmask, 255, 255, 255,  0);
			IP4_ADDR(&gw,      192, 168,   1,  1);
		#endif
	#endif


	print_app_header(); 	// Imprimir encabezado de la aplicación

	lwip_init();	// Inicializar la pila lwIP


	#if (LWIP_IPV6 == 0)
		/* Add network interface to the netif_list, and set it as default */
		if (!xemac_add(echo_netif, &ipaddr, &netmask,
							&gw, mac_ethernet_address,
							PLATFORM_EMAC_BASEADDR)) {
			xil_printf("Error adding N/W interface\n\r");
			return -1;
		}
	#else
		/* Add network interface to the netif_list, and set it as default */
		if (!xemac_add(echo_netif, NULL, NULL, NULL, mac_ethernet_address,
							PLATFORM_EMAC_BASEADDR)) {
			xil_printf("Error adding N/W interface\n\r");
			return -1;
		}
		echo_netif->ip6_autoconfig_enabled = 1;

		netif_create_ip6_linklocal_address(echo_netif, 1);
		netif_ip6_addr_set_state(echo_netif, 0, IP6_ADDR_VALID);

		print_ip6("\n\rBoard IPv6 address ", &echo_netif->ip6_addr[0].u_addr.ip6);

	#endif


	netif_set_default(echo_netif);


	platform_enable_interrupts(); /* now enable interrupts */

	// fd: [] que tan necesario es esto?
	netif_set_up(echo_netif); /* specify that the network if is up */

	#if (LWIP_IPV6 == 0)
		#if (LWIP_DHCP==1)
			dhcp_start(echo_netif);
			dhcp_timoutcntr = 500;  // ⬅️ aumentamos el tiempo de espera

			while(((echo_netif->ip_addr.addr) == 0) && (dhcp_timoutcntr > 0)) {
				xil_printf("Esperando DHCP... (%d)\n\r", dhcp_timoutcntr);
				xemacif_input(echo_netif);
				dhcp_timoutcntr--;
			}


			if (dhcp_timoutcntr <= 0) {
				if ((echo_netif->ip_addr.addr) == 0) {
					xil_printf("DHCP Timeout\r\n");
					xil_printf("Configuring default IP\r\n");
					IP4_ADDR(&(echo_netif->ip_addr),  10, 3, 84, 40);
					IP4_ADDR(&(echo_netif->netmask), 255, 255, 255,  0);
					IP4_ADDR(&(echo_netif->gw),      10, 3,  84,  4);
				}
			}

			ipaddr.addr = echo_netif->ip_addr.addr;
			gw.addr = echo_netif->gw.addr;
			netmask.addr = echo_netif->netmask.addr;
		#endif

		print_ip_settings(&ipaddr, &netmask, &gw);

	#endif

	// a este punto tenemos una conexion hecha
	// Cargar massive_payload desde massive_data.h
	load_massive_data();


	/* start the application (web server, rxtest, txtest, etc..) */
	start_application();

	/* receive and process packets */
	while (1) {
		if (TcpFastTmrFlag) {
			tcp_fasttmr();
			TcpFastTmrFlag = 0;
		}
		if (TcpSlowTmrFlag) {
			tcp_slowtmr();
			TcpSlowTmrFlag = 0;
		}
		xemacif_input(echo_netif);
		//transfer_data();

		int cargados = load_lines_to_buffer(&line_rb);
//		if (cargados > 0) {
//		    xil_printf("[main] %d bloques nuevos cargados al buffer circular.\n\r", cargados);
//		}

	}

	/* never reached */
	cleanup_platform();

	return 0;
}
