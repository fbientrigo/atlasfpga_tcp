
#include <stdio.h>
#include <string.h>

#include "lwip/err.h"
#include "lwip/tcp.h"

//hardocded data
#include "massive_data.h"
#include "small_data.h"

#define MASSIVE_PAYLOAD_SIZE 512



#if defined (__arm__) || defined (__aarch64__)
#include "xil_printf.h"
#endif


// --- 0410
// Declaración externa del massive_payload definido en main.c
extern char massive_payload[];

// PCB global para la conexión actual
struct tcp_pcb *global_pcb = NULL;
// Bandera para el envío único del massive_payload
static int massive_sent = 0;
// ---


err_t recv_callback(void *arg, struct tcp_pcb *tpcb,
                               struct pbuf *p, err_t err)
{
	/* do not read the packet if we are not in ESTABLISHED state */
	if (!p) {
		tcp_close(tpcb);
		tcp_recv(tpcb, NULL);
		xil_printf("Cliente desconectado\n");
		return ERR_OK;
	}

	/* indicate that the packet has been received */
	tcp_recved(tpcb, p->len);
    xil_printf("Datos recibidos desde cliente (%d bytes): %s\n\r", p->len, (char *)p->payload);


	/* echo back the payload */
	/* in this case, we assume that the payload is < TCP_SND_BUF */
    err_t error = tcp_write(tpcb, p->payload, p->len, TCP_WRITE_FLAG_COPY);
    if (error == ERR_OK) {
        tcp_output(tpcb);
        xil_printf("Eco enviado al cliente\n\r");
    } else {
        xil_printf("Error al enviar eco, código: %d\n\r", error);
    }

	/* free the received pbuf */
	pbuf_free(p);

	return ERR_OK;
}


/*
* accept_callback: Callback que se invoca al aceptar una nueva conexión TCP.
*/
err_t accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err)
{
	static int connection_id = 1;

	/* set the receive callback for this connection */
	tcp_recv(newpcb, recv_callback);
	/* just use an integer number indicating the connection id as the
	   callback argument */
	tcp_arg(newpcb, (void*)(UINTPTR)connection_id);

	/* increment for subsequent accepted connections */
	connection_id++;

	// f:0410

    global_pcb = newpcb;
    massive_sent = 0; // Resetea el indicador de envío para esta conexión nueva
    xil_printf("Nueva conexion aceptada. global_pcb asignado\n\r");
	return ERR_OK;
}


/*
* load_massive_data: Carga los datos masivos desde massive_data (definido en massive_data.h)
*                      al buffer global massive_payload. simulando el sistema completo
*/
void load_massive_data(void)
{
    // Usamos strncpy para evitar sobreescritura
    strncpy(massive_payload, massive_data, MASSIVE_PAYLOAD_SIZE - 1);

    //strncpy(massive_payload, small_data, MASSIVE_PAYLOAD_SIZE - 1);


    // Aseguramos la terminación nula
    massive_payload[MASSIVE_PAYLOAD_SIZE - 1] = '\0';
    xil_printf("Massive data loaded:\n%s\n", massive_payload);
}

/*
* transfer_data: Envía massive_payload al cliente si aún no se ha enviado.
*/
int transfer_data() {
    if (!massive_sent && global_pcb != NULL) {
        u16_t payload_len = strlen(massive_payload);
        u16_t sndbuf_space = tcp_sndbuf(global_pcb);
        xil_printf("Massive payload length: %d, available tcp_sndbuf: %d\n\r", payload_len, sndbuf_space);

        if (sndbuf_space > payload_len) {
            err_t err = tcp_write(global_pcb, massive_payload, payload_len, TCP_WRITE_FLAG_COPY);
            if (err == ERR_OK) {
                tcp_output(global_pcb);
                xil_printf("Massive payload enviado\n\r");
                massive_sent = 1;
            } else {
                xil_printf("Error enviando massive payload, código: %d\n\r", err);
            }
        } else {
            xil_printf("No hay suficiente espacio en tcp_sndbuf para massive payload\n\r");
        }
    }
    return 0;
}

void print_app_header()
{
#if (LWIP_IPV6==0)
	xil_printf("\n\r\n\r-----lwIP TCP echo server ------\n\r");
#else
	xil_printf("\n\r\n\r-----lwIPv6 TCP echo server ------\n\r");
#endif
	xil_printf("TCP packets sent to port 6001 will be echoed back\n\r");
}



int start_application()
{
	struct tcp_pcb *pcb;
	err_t err;
	unsigned port = 7;

	/* create new TCP PCB structure */
	pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}

	/* bind to specified @port */
	err = tcp_bind(pcb, IP_ANY_TYPE, port);
	if (err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n\r", port, err);
		return -2;
	}

	/* we do not need any arguments to callback functions */
	tcp_arg(pcb, NULL);

	/* listen for connections */
	pcb = tcp_listen(pcb);
	if (!pcb) {
		xil_printf("Out of memory while tcp_listen\n\r");
		return -3;
	}

	/* specify callback to use for incoming connections */
	tcp_accept(pcb, accept_callback);

	xil_printf("TCP echo server started @ port %d\n\r", port);

	return 0;
}
